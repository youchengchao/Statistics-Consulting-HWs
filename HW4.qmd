---
title: "HW4"
date: today
author: 高嘉妤、柯堯珹、吳承恩、趙友誠
format:
 pdf:
    fig-pos: 'h'
    engine: xelatex
    include-in-header:
      - text: |
         \usepackage{setspace,relsize}
         \usepackage{geometry}
         \usepackage{xeCJK}
         \usepackage{float}
         \geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
         \setmainfont{Times New Roman}
         \setCJKmainfont{標楷體}
toc: true
documentclass: article
---

```{r}
#| output: FALSE
#| warning: FALSE
library(rio)           #read sav file
library(labelled)      #remove attribute of sav data
library(Hmisc)         #describe
library(dplyr)
library(ggplot2)
library(MASS)
library(sf)            #render map
#remotes::install_github("shihjyun/twmap")
library(twmap)         #map data
library(showtext)      #show zw-tw in ggplot2
pollsav <- import("poll.sav")
str(pollsav)
```

# 資料簡介

Dimension of the Data : ***1671 samples × 15 columns***

| Variables  | Explanation         | remark                                                 |
|----------------|----------------|-----------------------------------------|
| V1         | District            | 1:北區, 2:中西區                                       |
| V2、V3     | Li                  | v2: 33個里, v3: 20個里                                 |
| V4_1\~V4_8 | Candidate known     | 1\~10號                                                |
| V5         | Candidate supported | 1\~10號                                                |
| V6         | Age                 | 1:20到29歲,2:30到39歲,3:40到49歲,4:50到59歲,5:60歲以上 |
| V7         | Education level     | 1:小學, 2:國中, 3:高中, 4:專科, 5:大學以上             |
| V8         | Sex                 | 1:male, 2:female                                       |

: 變數解釋

# 資料前處理

## 資料整理

```{r}
#| output: asis
pollcsv <- data.frame(
  apply(pollsav,2,function(col){
    as.factor(
      remove_attributes(col,
                        attributes = c("label","format.spss",
                                       "display_width","labels")))
})) #因為sav格式的"屬性"會造成describe的bug
pollcsv <- remove_attributes(pollcsv, "dimnames")
n <- dim(pollcsv)[1]
latex(describe(pollcsv), file="")
```

| Variables  | Missing  |
|:-----------|:---------|
| V1         | 98,99    |
| V2、V3     | 44,98,99 |
| V4_1\~V4_8 | 91,98,99 |
| V5         | 91,98,99 |
| V6         | 6,99     |
| V7         | 95,99    |
| V8         | 99       |

: 遺失值定義

## 遺失值比例圖

將定義的遺失值轉換成NA並以遺失值比例圖(by variable)的方式呈現。
考量到遺失值的性質，我們並未刪除任何資料，決定後續對不同變數分析時再移除。

```{r}
pollcsv <- data.frame(
  t(apply(pollcsv,MARGIN = 1, FUN = function(row){
    row[row==99 | row==98 | row==95 | row==91 | row==44] <- NA
    return(row)
  }))
)
pollcsv$v6[pollcsv$v6==6] <- NA
DataExplorer::plot_missing(pollcsv, title = "Fig 1: Missing Value",)
```
# 候選人支持率分析表

支持度定義 : $\text{支持度} = \frac{\text{第五題出現次數}}{\text{樣本數}}$

```{r}
#| output: asis
#計算總體支持度
count5.total <- sapply(1:11,function(x){
  if(x==11) return(sum(is.na(pollcsv$v5))/n)
  else return(sum(pollcsv$v5[!is.na(pollcsv$v5)]==x)/n)
} )
#計算分區支持度(北區中西區) v1
support.district <- do.call(rbind, lapply(1:2,function(i){
  tempdata <- pollcsv[pollcsv$v1==i,]
  n.temp <- dim(tempdata)[1]
  return(sapply(1:11, function(x){
    if(x==11) return(sum(is.na(tempdata$v5))/n.temp)
    else return(sum(tempdata$v5[!is.na(tempdata$v5)]==x)/n.temp)
    }))
}))
#計算性別支持度 v8
support.sex <- do.call(rbind, lapply(1:2,function(i){
  tempdata <- pollcsv[pollcsv$v8==i,]
  n.temp <- dim(tempdata)[1]
  return(sapply(1:11, function(x){
    if(x==11) return(sum(is.na(tempdata$v5))/n.temp)
    else return(sum(tempdata$v5[!is.na(tempdata$v5)]==x)/n.temp)
    }))
}))
#計算年齡支持度 v6
support.age <- do.call(rbind, lapply(1:5,function(i){
  tempdata <- pollcsv[pollcsv$v6==i,]
  n.temp <- dim(tempdata)[1]
  return(sapply(1:11, function(x){
    if(x==11) return(sum(is.na(tempdata$v5))/n.temp)
    else return(sum(tempdata$v5[!is.na(tempdata$v5)]==x)/n.temp)
    }))
}))
#計算教育程度支持度 v7
support.edu <- do.call(rbind, lapply(1:5,function(i){
  tempdata <- pollcsv[pollcsv$v7==i,]
  n.temp <- dim(tempdata)[1]
  return(sapply(1:11, function(x){
    if(x==11) return(sum(is.na(tempdata$v5))/n.temp)
    else return(sum(tempdata$v5[!is.na(tempdata$v5)]==x)/n.temp)
    }))
}))
table.support <- rbind(
  count5.total,
  support.district,
  support.sex,
  support.age,
  support.edu
)
table.support <- data.frame(
  apply(table.support, 2, function(col) paste0(round(col,3)*100,"%"))
)
rownames(table.support) <- c(
  "",
  "北區","中西區",
  "男性","女性",
  "20到29歲","30到39歲","40到49歲","50到59歲","60歲以上",
  "小學","國中","高中","專科","大學以上 ")
colnames(table.support) <- c(1:10,"沒決定")
latex(table.support, file = "",title="",
      rgroup = c("總計","分區","性別","年齡","學歷"),
      n.rgroup = c(1,2,2,5,5),
      caption = "候選人支持度整理表"
)
```

# 三號候選人的競選策略(需在何地、對何人進行拉票)

```{r}
#| eval: false
#| echo: false
twmap::tw_county #縣市界圖
twmap::tw_town #鄉鎮市區界圖
twmap::tw_village #村里界圖
```

## 三號候選人之里heatmap

```{r, out.width="100%"}
#| warning: false
#計算三號候選人對於里的支持度
support.li_north <- data.frame(
  support = sapply(1:33, function(i){
    tempdata <- pollcsv[pollcsv$v2==i,]
    n.temp <- dim(tempdata)[1]
    return(sum(tempdata$v5[!is.na(tempdata$v5)]==3)/n.temp)}
  ),
  VILLNAME = names(attr(pollsav$v2,"labels"))[1:33]
)
support.li_midwest <- data.frame(
  support = sapply(1:20, function(i){
    tempdata <- pollcsv[pollcsv$v3==i,]
    n.temp <- dim(tempdata)[1]
    return(sum(tempdata$v5[!is.na(tempdata$v5)]==3)/n.temp)
  }),
  VILLNAME = names(attr(pollsav$v3,"labels"))[1:20]
)
#從台灣地圖選取中西區與北區里層級的地圖資料
myMap <- tw_village[
  tw_village$COUNTYNAME == "臺南市" & 
  (tw_village$TOWNNAME=="中西區"| tw_village$TOWNNAME=="北區") ,]
myMap <- merge(x = myMap, y = rbind(support.li_midwest, support.li_north), by = "VILLNAME")
showtext_auto()
ggplot(data = myMap) +
  geom_sf(aes(fill = support)) +  # 填充區域
  geom_sf(
    data = summarize(
      group_by(myMap,TOWNNAME),
      geometry = st_union(st_buffer(geometry,dist = 0.01))) , fill = NA, color = 'red') + 
      #st_buffer是為了解決union之後內部還有線條的問題(地圖資料有問題)
  geom_sf_text(aes(label=VILLNAME), size = 2, color = "white")+
  ggtitle("Fig 2: 三號候選人支持度熱區圖")+
  labs(fill = "支持度")+
  theme_gray(base_family ="Arial", base_size = 10)
```

# 受訪者政治熱衷程度之統計模型(需說明使用此模型之理由)

```{r}
#| warning: false
pollcsv$known_count <- rowSums(!is.na(pollcsv[,c("v4_1", "v4_2", "v4_3", "v4_4", "v4_5", "v4_6", "v4_7", "v4_8")]))

count_data <- data.frame(
  Times = factor(0:8),
  Values = sapply(0:8,function(x){
    sum(pollcsv$known_count==x)
  })
)

#建立次數圖
ggplot(count_data, aes(x = Times, y = Values , fill = Times ))+ 
  geom_bar(stat = 'identity')+
  scale_x_discrete(breaks = 0:8)+
  labs(title='Fig 3:政治熱衷程度計數長條圖', x = '知道候選人數量', y = '人數')+
  theme_minimal()+
  theme(plot.title = element_text(hjust = 0.5))

poiv4<-glm(known_count~v1+v6+v7+v8, data = pollcsv, family = poisson())
AER::dispersiontest(poiv4)

nbv4 <- glm.nb(known_count~v1+v6+v7+v8, data = pollcsv)
lrtest(poiv4,nbv4) #決定要用Poisson 還是 Negative binomial
summary(nbv4)

library(pscl)     #建立zero-inflated negative model
zinb_model <- zeroinfl(known_count ~ v1 +v6+v7+v8, data = pollcsv, dist = "negbin")
lrtest(nbv4,zinb_model) #決定要用Negative 或 zero-inflated
summary(zinb_model)
```

先將每位受訪者知道的候選人用計數的方式去呈現出政治熱忠程度，而這些資料就轉變成count data，也因此先使用Poisson model 去做模型。然而在使用Poisson model之後並且去做Dispersion test時，可以發現這個模型有Overdispersion的情形產生，並且Likelihood ratio test的結果也建議我們使用Negative binomial 的模型。在做出資料的分布圖後，可以發現受訪者完全不知道候選人的比例偏高，也就是0的資料，也因此想要使用Zero-inflated negative binomial model去解決0所帶來的問題。
由ZINB的報表可以得知，在count model 底下，也就是有講出候選人的受訪者中，30~39歲，40~49歲，50~59歲以及60歲以上，他們相較於20~29歲是顯著的，並且他們的係數是逐步提高的，因此我們可以認為隨著年齡提高，政治熱忠程度也會隨之提高。
而在零膨脹模型，教育程度的變數當中，高中及專科相較於國小是顯著的，也代表著高中及專科的受訪者更可能出現非零值，也就是說他們相較於教育程度只有國小的受訪者是更可能回答出候選人的。而在性別的部分，可以發現女性相較於男性是顯著的，藉由係數我們可以解釋成女性相較於男性較可能回答不出候選人，也就是說女性提高了結構性零的機率。



# 三號候選人支持率預測模式 與資料不平衡處理
```{r, out.width="100%"}
set.seed(123)  # For reproducibility
library(smotefamily)
library(dplyr)
new_poll <- pollcsv[,c(1,13,14,15,16)]
new_poll_wei <- pollcsv[,c(1,13,14,15,16)]
#由於在V1 V6 V7 V8當中，缺失值並不多，因此我選擇刪除缺失值
new_poll <- na.omit(new_poll)
new_poll_wei <- na.omit(new_poll_wei)
new_poll_wei$sup3 <- as.numeric(new_poll_wei$sup3)
#轉換為數值才能使用smote
new_poll <- new_poll %>% 
  mutate_if(is.character, as.factor) %>% 
  mutate_if(is.factor, as.numeric)

poll_balanced <- SMOTE(X = new_poll[, -which(names(new_poll) == "sup3")], 
                    target = new_poll$sup3, 
                    K = 5)
table(poll_balanced$data$class)

poll_balanced <- poll_balanced$data
#由於smote 過後他新增的資料可能會有不是整數的狀況，然而在這筆資料當中應該要為整數，也因此我選擇將那些有小數點的資料四捨五入
poll_balanced[] <- lapply(poll_balanced, function(x) if(is.numeric(x)) round(x) else x)
poll_balanced$class <- as.numeric(poll_balanced$class)
#轉換為factor
poll_balanced[c("v1", "v6", "v7", "v8")] <- lapply(poll_balanced[c("v1", "v6", "v7", "v8")], as.factor)
describe(poll_balanced)


train_nrow <- floor(0.7 * nrow(poll_balanced))
train_idx <- sample(seq_len(nrow(poll_balanced)), size=train_nrow)

poll_training <- poll_balanced[train_idx, ]
cat("Training set size:", nrow(poll_training))

poll_testing <- poll_balanced[-train_idx, ]
cat("Test set size:", nrow(poll_testing))

sup3_log <- glm(class ~ ., data = poll_training, family = binomial)
summary(sup3_log)
pred_prob <- predict(sup3_log, poll_testing, type = "response")

pred_class <- ifelse(pred_prob > 0.5, 1, 0)

library(caret)
confusionMatrix(factor(pred_class), factor(poll_testing$class))

#Weighted logistic regression

class_counts <- table(new_poll_wei$sup3)
class_counts

train_nrow_wei <- floor(0.7 * nrow(new_poll_wei))
train_idx_wei <- sample(seq_len(nrow(new_poll_wei)), size=train_nrow_wei)

poll_training_wei <- new_poll_wei[train_idx_wei, ]

weights <- ifelse(poll_training_wei$sup3 == 1,
                  class_counts[1] / (class_counts[1]+class_counts[2]),
                  class_counts[2] / (class_counts[1]+class_counts[2]))  
poll_testing_wei <- new_poll_wei[-train_idx_wei, ]

weighted_logit_model <- glm(sup3 ~ v1 + v6 + v7 + v8, 
                            data = poll_training_wei, 
                            family = binomial, 
                            weights = weights)

summary(weighted_logit_model)

pred_prob_wei <- predict(weighted_logit_model, poll_testing_wei, type = "response")

library(pROC)
#使用roc curve 找出最佳的閥值
roc_curve <- roc(poll_testing_wei$sup3, pred_prob_wei)
best_coords <- coords(roc_curve, "best", best.method = "youden")


pred_class_wei <- ifelse(pred_prob_wei > best_coords$threshold, 1, 0)

confusionMatrix(factor(pred_class_wei), factor(poll_testing_wei$sup3))

```
在處理不平衡資料的時候，我選擇使用smote 以及 weighted logistic regression 來處理。我分別將他們都切成訓練集以及測試集，並且對他們做confusion matrics 以此來判斷哪個模型較佳。在這過程當中，weighted logistic regression 在最後分類的accuracy rate 高達 0.7214，而smote 的accuracy rate 則僅有0.5825，因此我認為使用weighted logistic regression在這裡是較佳的。此外，weighted權重的部分我是以比例去決定的，以此減少資料的不平衡。




